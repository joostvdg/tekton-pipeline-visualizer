/* (C)2024 */
package net.joostvdg.tektonvisualizer.model;

import java.time.Duration;
import java.time.Instant;
import java.util.List;
import java.util.Objects;

/**
 * Represents the status of a Tekton Pipeline, capturing the results, stages, status, start and end
 * time and duration.
 *
 * @param pipelineIdentifier The identifier of the pipeline to associate this status with
 * @param results Any results generated by the pipeline
 * @param stages The stages of the pipeline
 * @param status The status of the pipeline
 * @param instantOfCompletion The point in time the pipeline ended
 * @param instantOfStart The point in time the pipeline started
 */
public record PipelineStatus(
    String identifier,
    String pipelineIdentifier,
    String name,
    List<Result> results,
    List<PipelineStage> stages,
    Status status,
    Instant instantOfCompletion,
    Instant instantOfStart,
    Duration duration)
    implements TektonResourceType {
  public PipelineStatus {
    Objects.requireNonNull(pipelineIdentifier, "PipelineIdentifier cannot be null");
    Objects.requireNonNull(name, "Name cannot be null");
    // TODO: Add validation for stages
    // Objects.requireNonNull(stages, "Stages cannot be null");
    // results should be nullable, as you can have a pipeline without results
    Objects.requireNonNull(status, "Status cannot be null");
    Objects.requireNonNull(instantOfCompletion, "instantOfCompletion cannot be null");
    Objects.requireNonNull(instantOfStart, "instantOfStart cannot be null");
    // Calculate duration if not provided
    if (duration == null) {
      duration = Duration.between(instantOfStart, instantOfCompletion);
    }
    // Generate GUID if the Identifier is not provided
    if (identifier == null || identifier.isBlank()) {
      identifier = java.util.UUID.randomUUID().toString();
    }
  }

  public static class Builder {
    private String identifier;
    private String pipelineIdentifier;
    private String name;
    private List<Result> results;
    private List<PipelineStage> stages;
    private Status status;
    private Instant instantOfCompletion;
    private Instant instantOfStart;
    private Duration duration;

    public Builder identifier(String identifier) {
      this.identifier = identifier;
      return this;
    }

    public Builder pipelineIdentifier(String pipelineIdentifier) {
      this.pipelineIdentifier = pipelineIdentifier;
      return this;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder results(List<Result> results) {
      this.results = results;
      return this;
    }

    public Builder stages(List<PipelineStage> stages) {
      this.stages = stages;
      return this;
    }

    public Builder status(Status status) {
      this.status = status;
      return this;
    }

    public Builder instantOfCompletion(Instant instantOfCompletion) {
      this.instantOfCompletion = instantOfCompletion;
      return this;
    }

    public Builder instantOfStart(Instant instantOfStart) {
      this.instantOfStart = instantOfStart;
      return this;
    }

    public Builder duration(Duration duration) {
      this.duration = duration;
      return this;
    }

    public PipelineStatus build() {
      return new PipelineStatus(
          identifier,
          pipelineIdentifier,
          name,
          results,
          stages,
          status,
          instantOfCompletion,
          instantOfStart,
          duration);
    }
  }
}
