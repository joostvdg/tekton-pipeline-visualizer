/*
 * This file is generated by jOOQ.
 */
package net.joostvdg.tektonvisualizer.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.joostvdg.tektonvisualizer.model.Indexes;
import net.joostvdg.tektonvisualizer.model.Keys;
import net.joostvdg.tektonvisualizer.model.Public;
import net.joostvdg.tektonvisualizer.model.tables.PipelineResult.PipelineResultPath;
import net.joostvdg.tektonvisualizer.model.tables.PipelineStage.PipelineStagePath;
import net.joostvdg.tektonvisualizer.model.tables.PipelineStatusSupplyChain.PipelineStatusSupplyChainPath;
import net.joostvdg.tektonvisualizer.model.tables.PipelineTrigger.PipelineTriggerPath;
import net.joostvdg.tektonvisualizer.model.tables.SupplyChain.SupplyChainPath;
import net.joostvdg.tektonvisualizer.model.tables.records.PipelineStatusRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PipelineStatus extends TableImpl<PipelineStatusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pipeline_status</code>
     */
    public static final PipelineStatus PIPELINE_STATUS = new PipelineStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PipelineStatusRecord> getRecordType() {
        return PipelineStatusRecord.class;
    }

    /**
     * The column <code>public.pipeline_status.id</code>.
     */
    public final TableField<PipelineStatusRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pipeline_status.name</code>.
     */
    public final TableField<PipelineStatusRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.pipeline_status.pipeline_id</code>.
     */
    public final TableField<PipelineStatusRecord, String> PIPELINE_ID = createField(DSL.name("pipeline_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.pipeline_status.start_timestamp</code>.
     */
    public final TableField<PipelineStatusRecord, OffsetDateTime> START_TIMESTAMP = createField(DSL.name("start_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.pipeline_status.duration</code>.
     */
    public final TableField<PipelineStatusRecord, Long> DURATION = createField(DSL.name("duration"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pipeline_status.success</code>.
     */
    public final TableField<PipelineStatusRecord, Boolean> SUCCESS = createField(DSL.name("success"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.pipeline_status.completion_message</code>.
     */
    public final TableField<PipelineStatusRecord, String> COMPLETION_MESSAGE = createField(DSL.name("completion_message"), SQLDataType.VARCHAR(255), this, "");

    private PipelineStatus(Name alias, Table<PipelineStatusRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PipelineStatus(Name alias, Table<PipelineStatusRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.pipeline_status</code> table reference
     */
    public PipelineStatus(String alias) {
        this(DSL.name(alias), PIPELINE_STATUS);
    }

    /**
     * Create an aliased <code>public.pipeline_status</code> table reference
     */
    public PipelineStatus(Name alias) {
        this(alias, PIPELINE_STATUS);
    }

    /**
     * Create a <code>public.pipeline_status</code> table reference
     */
    public PipelineStatus() {
        this(DSL.name("pipeline_status"), null);
    }

    public <O extends Record> PipelineStatus(Table<O> path, ForeignKey<O, PipelineStatusRecord> childPath, InverseForeignKey<O, PipelineStatusRecord> parentPath) {
        super(path, childPath, parentPath, PIPELINE_STATUS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PipelineStatusPath extends PipelineStatus implements Path<PipelineStatusRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PipelineStatusPath(Table<O> path, ForeignKey<O, PipelineStatusRecord> childPath, InverseForeignKey<O, PipelineStatusRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PipelineStatusPath(Name alias, Table<PipelineStatusRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PipelineStatusPath as(String alias) {
            return new PipelineStatusPath(DSL.name(alias), this);
        }

        @Override
        public PipelineStatusPath as(Name alias) {
            return new PipelineStatusPath(alias, this);
        }

        @Override
        public PipelineStatusPath as(Table<?> alias) {
            return new PipelineStatusPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PIPELINE_STATUS_NAME_INDEX);
    }

    @Override
    public Identity<PipelineStatusRecord, Integer> getIdentity() {
        return (Identity<PipelineStatusRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PipelineStatusRecord> getPrimaryKey() {
        return Keys.PIPELINE_STATUS_PKEY;
    }

    private transient PipelineResultPath _pipelineResult;

    /**
     * Get the implicit to-many join path to the
     * <code>public.pipeline_result</code> table
     */
    public PipelineResultPath pipelineResult() {
        if (_pipelineResult == null)
            _pipelineResult = new PipelineResultPath(this, null, Keys.PIPELINE_RESULT__PIPELINE_RESULT_PIPELINE_STATUS_ID_FKEY.getInverseKey());

        return _pipelineResult;
    }

    private transient PipelineStagePath _pipelineStage;

    /**
     * Get the implicit to-many join path to the
     * <code>public.pipeline_stage</code> table
     */
    public PipelineStagePath pipelineStage() {
        if (_pipelineStage == null)
            _pipelineStage = new PipelineStagePath(this, null, Keys.PIPELINE_STAGE__PIPELINE_STAGE_PIPELINE_STATUS_ID_FKEY.getInverseKey());

        return _pipelineStage;
    }

    private transient PipelineStatusSupplyChainPath _pipelineStatusSupplyChain;

    /**
     * Get the implicit to-many join path to the
     * <code>public.pipeline_status_supply_chain</code> table
     */
    public PipelineStatusSupplyChainPath pipelineStatusSupplyChain() {
        if (_pipelineStatusSupplyChain == null)
            _pipelineStatusSupplyChain = new PipelineStatusSupplyChainPath(this, null, Keys.PIPELINE_STATUS_SUPPLY_CHAIN__PIPELINE_STATUS_SUPPLY_CHAIN_PIPELINE_STATUS_ID_FKEY.getInverseKey());

        return _pipelineStatusSupplyChain;
    }

    private transient PipelineTriggerPath _pipelineTrigger;

    /**
     * Get the implicit to-many join path to the
     * <code>public.pipeline_trigger</code> table
     */
    public PipelineTriggerPath pipelineTrigger() {
        if (_pipelineTrigger == null)
            _pipelineTrigger = new PipelineTriggerPath(this, null, Keys.PIPELINE_TRIGGER__PIPELINE_TRIGGER_PIPELINE_STATUS_ID_FKEY.getInverseKey());

        return _pipelineTrigger;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.supply_chain</code> table
     */
    public SupplyChainPath supplyChain() {
        return pipelineStatusSupplyChain().supplyChain();
    }

    @Override
    public PipelineStatus as(String alias) {
        return new PipelineStatus(DSL.name(alias), this);
    }

    @Override
    public PipelineStatus as(Name alias) {
        return new PipelineStatus(alias, this);
    }

    @Override
    public PipelineStatus as(Table<?> alias) {
        return new PipelineStatus(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PipelineStatus rename(String name) {
        return new PipelineStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PipelineStatus rename(Name name) {
        return new PipelineStatus(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PipelineStatus rename(Table<?> name) {
        return new PipelineStatus(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PipelineStatus where(Condition condition) {
        return new PipelineStatus(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PipelineStatus where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PipelineStatus where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PipelineStatus where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PipelineStatus where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PipelineStatus where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PipelineStatus where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PipelineStatus where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PipelineStatus whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PipelineStatus whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
