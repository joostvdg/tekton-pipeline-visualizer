/*
 * This file is generated by jOOQ.
 */
package net.joostvdg.tektonvisualizer.model.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.joostvdg.tektonvisualizer.model.Keys;
import net.joostvdg.tektonvisualizer.model.Public;
import net.joostvdg.tektonvisualizer.model.tables.PipelineStatus.PipelineStatusPath;
import net.joostvdg.tektonvisualizer.model.tables.records.PipelineTriggerRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PipelineTrigger extends TableImpl<PipelineTriggerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pipeline_trigger</code>
     */
    public static final PipelineTrigger PIPELINE_TRIGGER = new PipelineTrigger();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PipelineTriggerRecord> getRecordType() {
        return PipelineTriggerRecord.class;
    }

    /**
     * The column <code>public.pipeline_trigger.id</code>.
     */
    public final TableField<PipelineTriggerRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pipeline_trigger.pipeline_status_id</code>.
     */
    public final TableField<PipelineTriggerRecord, Integer> PIPELINE_STATUS_ID = createField(DSL.name("pipeline_status_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pipeline_trigger.trigger_type</code>.
     */
    public final TableField<PipelineTriggerRecord, String> TRIGGER_TYPE = createField(DSL.name("trigger_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.pipeline_trigger.event_listener</code>.
     */
    public final TableField<PipelineTriggerRecord, String> EVENT_LISTENER = createField(DSL.name("event_listener"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.pipeline_trigger.event_id</code>.
     */
    public final TableField<PipelineTriggerRecord, String> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.pipeline_trigger.rerun_of</code>.
     */
    public final TableField<PipelineTriggerRecord, String> RERUN_OF = createField(DSL.name("rerun_of"), SQLDataType.VARCHAR(255), this, "");

    private PipelineTrigger(Name alias, Table<PipelineTriggerRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PipelineTrigger(Name alias, Table<PipelineTriggerRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.pipeline_trigger</code> table reference
     */
    public PipelineTrigger(String alias) {
        this(DSL.name(alias), PIPELINE_TRIGGER);
    }

    /**
     * Create an aliased <code>public.pipeline_trigger</code> table reference
     */
    public PipelineTrigger(Name alias) {
        this(alias, PIPELINE_TRIGGER);
    }

    /**
     * Create a <code>public.pipeline_trigger</code> table reference
     */
    public PipelineTrigger() {
        this(DSL.name("pipeline_trigger"), null);
    }

    public <O extends Record> PipelineTrigger(Table<O> path, ForeignKey<O, PipelineTriggerRecord> childPath, InverseForeignKey<O, PipelineTriggerRecord> parentPath) {
        super(path, childPath, parentPath, PIPELINE_TRIGGER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PipelineTriggerPath extends PipelineTrigger implements Path<PipelineTriggerRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PipelineTriggerPath(Table<O> path, ForeignKey<O, PipelineTriggerRecord> childPath, InverseForeignKey<O, PipelineTriggerRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PipelineTriggerPath(Name alias, Table<PipelineTriggerRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PipelineTriggerPath as(String alias) {
            return new PipelineTriggerPath(DSL.name(alias), this);
        }

        @Override
        public PipelineTriggerPath as(Name alias) {
            return new PipelineTriggerPath(alias, this);
        }

        @Override
        public PipelineTriggerPath as(Table<?> alias) {
            return new PipelineTriggerPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PipelineTriggerRecord, Integer> getIdentity() {
        return (Identity<PipelineTriggerRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PipelineTriggerRecord> getPrimaryKey() {
        return Keys.PIPELINE_TRIGGER_PKEY;
    }

    @Override
    public List<ForeignKey<PipelineTriggerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PIPELINE_TRIGGER__PIPELINE_TRIGGER_PIPELINE_STATUS_ID_FKEY);
    }

    private transient PipelineStatusPath _pipelineStatus;

    /**
     * Get the implicit join path to the <code>public.pipeline_status</code>
     * table.
     */
    public PipelineStatusPath pipelineStatus() {
        if (_pipelineStatus == null)
            _pipelineStatus = new PipelineStatusPath(this, Keys.PIPELINE_TRIGGER__PIPELINE_TRIGGER_PIPELINE_STATUS_ID_FKEY, null);

        return _pipelineStatus;
    }

    @Override
    public PipelineTrigger as(String alias) {
        return new PipelineTrigger(DSL.name(alias), this);
    }

    @Override
    public PipelineTrigger as(Name alias) {
        return new PipelineTrigger(alias, this);
    }

    @Override
    public PipelineTrigger as(Table<?> alias) {
        return new PipelineTrigger(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PipelineTrigger rename(String name) {
        return new PipelineTrigger(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PipelineTrigger rename(Name name) {
        return new PipelineTrigger(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PipelineTrigger rename(Table<?> name) {
        return new PipelineTrigger(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PipelineTrigger where(Condition condition) {
        return new PipelineTrigger(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PipelineTrigger where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PipelineTrigger where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PipelineTrigger where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PipelineTrigger where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PipelineTrigger where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PipelineTrigger where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PipelineTrigger where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PipelineTrigger whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PipelineTrigger whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
