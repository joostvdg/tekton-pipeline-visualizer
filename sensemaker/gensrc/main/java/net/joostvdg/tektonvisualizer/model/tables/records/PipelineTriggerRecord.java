/*
 * This file is generated by jOOQ.
 */
package net.joostvdg.tektonvisualizer.model.tables.records;


import net.joostvdg.tektonvisualizer.model.tables.PipelineTrigger;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PipelineTriggerRecord extends UpdatableRecordImpl<PipelineTriggerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.pipeline_trigger.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.pipeline_trigger.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.pipeline_trigger.pipeline_status_id</code>.
     */
    public void setPipelineStatusId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.pipeline_trigger.pipeline_status_id</code>.
     */
    public Integer getPipelineStatusId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.pipeline_trigger.trigger_type</code>.
     */
    public void setTriggerType(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.pipeline_trigger.trigger_type</code>.
     */
    public String getTriggerType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.pipeline_trigger.event_listener</code>.
     */
    public void setEventListener(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.pipeline_trigger.event_listener</code>.
     */
    public String getEventListener() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.pipeline_trigger.event_id</code>.
     */
    public void setEventId(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.pipeline_trigger.event_id</code>.
     */
    public String getEventId() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.pipeline_trigger.rerun_of</code>.
     */
    public void setRerunOf(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.pipeline_trigger.rerun_of</code>.
     */
    public String getRerunOf() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PipelineTriggerRecord
     */
    public PipelineTriggerRecord() {
        super(PipelineTrigger.PIPELINE_TRIGGER);
    }

    /**
     * Create a detached, initialised PipelineTriggerRecord
     */
    public PipelineTriggerRecord(Integer id, Integer pipelineStatusId, String triggerType, String eventListener, String eventId, String rerunOf) {
        super(PipelineTrigger.PIPELINE_TRIGGER);

        setId(id);
        setPipelineStatusId(pipelineStatusId);
        setTriggerType(triggerType);
        setEventListener(eventListener);
        setEventId(eventId);
        setRerunOf(rerunOf);
        resetChangedOnNotNull();
    }
}
