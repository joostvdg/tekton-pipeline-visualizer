/*
 * This file is generated by jOOQ.
 */
package net.joostvdg.tektonvisualizer.model.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.joostvdg.tektonvisualizer.model.Indexes;
import net.joostvdg.tektonvisualizer.model.Keys;
import net.joostvdg.tektonvisualizer.model.Public;
import net.joostvdg.tektonvisualizer.model.tables.SupplyChain.SupplyChainPath;
import net.joostvdg.tektonvisualizer.model.tables.SupplyChainCodeSource.SupplyChainCodeSourcePath;
import net.joostvdg.tektonvisualizer.model.tables.records.CodeSourceRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CodeSource extends TableImpl<CodeSourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.code_source</code>
     */
    public static final CodeSource CODE_SOURCE = new CodeSource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodeSourceRecord> getRecordType() {
        return CodeSourceRecord.class;
    }

    /**
     * The column <code>public.code_source.id</code>.
     */
    public final TableField<CodeSourceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.code_source.source_name</code>.
     */
    public final TableField<CodeSourceRecord, String> SOURCE_NAME = createField(DSL.name("source_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.code_source.source_type</code>.
     */
    public final TableField<CodeSourceRecord, String> SOURCE_TYPE = createField(DSL.name("source_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.code_source.source_url</code>.
     */
    public final TableField<CodeSourceRecord, String> SOURCE_URL = createField(DSL.name("source_url"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.code_source.sub_path</code>.
     */
    public final TableField<CodeSourceRecord, String> SUB_PATH = createField(DSL.name("sub_path"), SQLDataType.VARCHAR(255), this, "");

    private CodeSource(Name alias, Table<CodeSourceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CodeSource(Name alias, Table<CodeSourceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.code_source</code> table reference
     */
    public CodeSource(String alias) {
        this(DSL.name(alias), CODE_SOURCE);
    }

    /**
     * Create an aliased <code>public.code_source</code> table reference
     */
    public CodeSource(Name alias) {
        this(alias, CODE_SOURCE);
    }

    /**
     * Create a <code>public.code_source</code> table reference
     */
    public CodeSource() {
        this(DSL.name("code_source"), null);
    }

    public <O extends Record> CodeSource(Table<O> path, ForeignKey<O, CodeSourceRecord> childPath, InverseForeignKey<O, CodeSourceRecord> parentPath) {
        super(path, childPath, parentPath, CODE_SOURCE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CodeSourcePath extends CodeSource implements Path<CodeSourceRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CodeSourcePath(Table<O> path, ForeignKey<O, CodeSourceRecord> childPath, InverseForeignKey<O, CodeSourceRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CodeSourcePath(Name alias, Table<CodeSourceRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CodeSourcePath as(String alias) {
            return new CodeSourcePath(DSL.name(alias), this);
        }

        @Override
        public CodeSourcePath as(Name alias) {
            return new CodeSourcePath(alias, this);
        }

        @Override
        public CodeSourcePath as(Table<?> alias) {
            return new CodeSourcePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.URL_SUBPATH_INDEX);
    }

    @Override
    public Identity<CodeSourceRecord, Integer> getIdentity() {
        return (Identity<CodeSourceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CodeSourceRecord> getPrimaryKey() {
        return Keys.CODE_SOURCE_PKEY;
    }

    private transient SupplyChainCodeSourcePath _supplyChainCodeSource;

    /**
     * Get the implicit to-many join path to the
     * <code>public.supply_chain_code_source</code> table
     */
    public SupplyChainCodeSourcePath supplyChainCodeSource() {
        if (_supplyChainCodeSource == null)
            _supplyChainCodeSource = new SupplyChainCodeSourcePath(this, null, Keys.SUPPLY_CHAIN_CODE_SOURCE__SUPPLY_CHAIN_CODE_SOURCE_CODE_SOURCE_ID_FKEY.getInverseKey());

        return _supplyChainCodeSource;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.supply_chain</code> table
     */
    public SupplyChainPath supplyChain() {
        return supplyChainCodeSource().supplyChain();
    }

    @Override
    public CodeSource as(String alias) {
        return new CodeSource(DSL.name(alias), this);
    }

    @Override
    public CodeSource as(Name alias) {
        return new CodeSource(alias, this);
    }

    @Override
    public CodeSource as(Table<?> alias) {
        return new CodeSource(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeSource rename(String name) {
        return new CodeSource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeSource rename(Name name) {
        return new CodeSource(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeSource rename(Table<?> name) {
        return new CodeSource(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeSource where(Condition condition) {
        return new CodeSource(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeSource where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeSource where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeSource where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CodeSource where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CodeSource where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CodeSource where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CodeSource where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeSource whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeSource whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
